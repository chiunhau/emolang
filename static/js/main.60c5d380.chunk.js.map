{"version":3,"sources":["logo.svg","dictionary.js","combinations.js","sentences.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","dictionary","ini","chr","meaning","itu","ilu","walu","ya","da","hito","nai","i","na","ka","ma","kot","lubo","ke","ni","luna","nizi","din","ne","las","dom","mau","duma","combinations","hito ini","hito itu","hito hito","hito hito ini","hito hito itu","hito ilu","hito walu","hito hito ilu","ma na","ma ini","ma itu","ka ni","ka luna","din ne","las las","din ne ne","din las las","sentences","roman","R","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","raw","target","value","compiled","compiler","state","react_default","a","createElement","className","type","placeHolder","onChange","scope","keys","map","v","key","style","marginTop","Component","toLowerCase","split","word","reduce","acc","val","test","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60c5d380.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const dictionary = {\n  \"ini\": {chr: \"👈\", meaning: \"this\"},\n  \"itu\": {chr: \"👉\", meaning: \"that\"},\n  \"ilu\": {chr: \"👍\", meaning: \"good\"},\n  \"walu\": {chr: \"👎\", meaning: \"bad\"},\n  \"ya\": {chr: \"🙋‍♂️\", meaning: \"me\"},\n  \"da\": {chr: \"🙆‍♂️\", meaning: \"yes\"},\n  \"hito\": {chr: \"👤\", meaning: \"person\"},\n  \"nai\": {chr: \"🙅‍♀️\", meaning: \"no\"},\n  \"i\": {chr: \"➕\", meaning: \"and\"},\n  \"na\": {chr: \"❓\", meaning: \"what\"},\n  \"ka\": {chr: \"⏱️\", meaning: \"time\"},\n  \"ma\": {chr: \"🗺\", meaning: \"place\"},\n  \"kot\": {chr: \"🐱\", meaning: \"cat\"},\n  \"lubo\": {chr: \"❤️\", meaning: \"love\"},\n  \"ke\": {chr: \"🚶‍♂️\", meaning: \"go to, walk to\"},\n  \"ni\": {chr: \"🌞\", meaning: \"sun\"},\n  \"luna\": {chr: \"🌜\", meaning: \"moon\"},\n  \"nizi\": {chr: \"🌈\", meaning: \"rainbow\"},\n  \"din\": {chr: \"🌅\", meaning: \"morning, day\"},\n  \"ne\": {chr: \"⏩\", meaning: \"next\"},\n  \"las\": {chr: \"⏪\", meaning: \"last\"},\n  \"dom\": {chr: \"🏠\", meaning: \"home\"},\n  \"mau\": {chr: \"🥺\", meaning: \"want, desire\"},\n  \"duma\": {chr: \"🤔\", meaning: \"think\"}\n}\n\nexport default dictionary\n","const combinations = {\n  \"hito ini\": {chr: \"👤👈\", meaning: \"you, this person\"},\n  \"hito itu\": {chr: \"👤👉\", meaning: \"he, she, it, that person\"},\n  \"hito hito\": {chr: \"👤👤\", meaning: \"people\"},\n  \"hito hito ini\": {chr: \"👤👤👈\", meaning: \"you (plural)\"},\n  \"hito hito itu\": {chr: \"👤👤👉\", meaning: \"they (plural)\"},\n  \"hito ilu\": {chr: \"👤👍\", meaning: \"good person\"},\n  \"hito walu\": {chr: \"👤👎\", meaning: \"bad person\"},\n  \"hito hito ilu\": {chr: \"👤👤👍\", meaning: \"good people\"},\n  \"ma na\": {chr: \"🗺❓\", meaning: \"where\"},\n  \"ma ini\": {chr: \"🗺👈\", meaning: \"here\"},\n  \"ma itu\": {chr: \"🗺👉\", meaning: \"there\"},\n  \"ka ni\": {chr: \"⏱️🌞\", meaning: \"year\"},\n  \"ka luna\": {chr: \"⏱️🌜\", meaning: \"month\"},\n  \"din ne\": {chr: \"🌅⏩\", meaning: \"tomorrow, next day\"},\n  \"las las\": {chr: \"🌅⏪\", meaning: \"yesterday, last day\"},\n  \"din ne ne\": {chr: \"🌅⏩⏩\", meaning: \"the day after tomorrow\"},\n  \"din las las\": {chr: \"🌅⏪⏪\", meaning: \"the day before yesterday\"},\n\n}\n\nexport default combinations\n","const sentences = [\n  {chr: \"🙋‍♂️🐱\", roman: 'Ya kot.', meaning: 'I am a cat.'},\n  {chr: \"🙋‍♂️❤️🐱\", roman: 'Ya lubo kot.', meaning: 'I love cat.'},\n  {chr: \"🙋‍♂️❤️👤👈\", roman: 'Ya lubo hito ini.', meaning: 'I love you.'},\n  {chr: \"👤👈❓\", roman: 'Hito ini na.', meaning: 'Who/What are you?'},\n  {chr: \"🐱👈\", roman: 'Kot ini.', meaning: 'This cat.'},\n  {chr: \"👈🐱\", roman: 'Ini kot.', meaning: 'This is a cat.'},\n  {chr: \"👤👈❤️🐱👈❓\", roman: 'Hito ini lubo kot ini na.', meaning: 'Do you like this cat?'},\n  {chr: \"👤👈🚶‍♂️🗺❓\", roman: 'Hito ini ke ma na.', meaning: 'Where are you going?'},\n  {chr: \"🙋‍♂️🥺🚶‍♂️🏠\", roman: 'Ya mau ke dom.', meaning: 'I want to go home.'},\n]\n\nexport default sentences\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport dictionary from './dictionary';\nimport combinations from './combinations';\nimport sentences from './sentences';\nconst R = require('ramda');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      raw: '',\n      compiled: ''\n    }\n  }\n\n  handleChange = e => {\n    this.setState({\n      raw: e.target.value,\n      compiled: compiler(e.target.value)\n    })\n  }\n  render() {\n    return (\n      <div className=\"container app\">\n        <h1>Emolang😂</h1>\n        <h4>An Emoji-based artificial language built for the Internet (and the real world).</h4>\n        <div className=\"input-panel\">\n          <input type=\"text\" value={this.state.raw} placeHolder=\"Try: Ya lubo kot\" onChange={this.handleChange} className=\"form-control raw\"/>\n        </div>\n        <p className=\"compiled\">{this.state.compiled}</p>\n        <div className=\"row top\">\n          <div className=\"col-sm-6\">\n            <h5>Available emojis</h5>\n            <div className=\"table-wrapper\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Emoji</th>\n                    <th scope=\"col\">Romanization</th>\n                    <th scope=\"col\">Meaning</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    R.keys(dictionary).map((v, i) => (\n                      <tr key={i}>\n                        <td>{dictionary[v].chr}</td>\n                        <td>{v}</td>\n                        <td>{dictionary[v].meaning}</td>\n                      </tr>\n                    ))\n                  }\n\n                </tbody>\n              </table>\n            </div>\n          </div>\n          <div className=\"col-sm-6\">\n            <h5>Combinations</h5>\n            <div className=\"table-wrapper\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Emoji</th>\n                    <th scope=\"col\">Romanization</th>\n                    <th scope=\"col\">Meaning</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    R.keys(combinations).map((v, i) => (\n                      <tr key={i}>\n                        <td>{combinations[v].chr}</td>\n                        <td>{v}</td>\n                        <td>{combinations[v].meaning}</td>\n                      </tr>\n                    ))\n                  }\n\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\" style={{marginTop: '40px'}}>\n          <div className=\"col-sm\">\n            <h4>Make sentences!</h4>\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Emoji</th>\n                  <th scope=\"col\">Romanization</th>\n                  <th scope=\"col\">Meaning</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  sentences.map((v, i) => (\n                    <tr key={i}>\n                      <td>{v.chr}</td>\n                      <td>{v.roman}</td>\n                      <td>{v.meaning}</td>\n                    </tr>\n                  ))\n                }\n\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst compiler = raw => {\n  const words = raw.toLowerCase().split(' ')\n  const compiledWords = words.map(word => {\n    return dictionary[word] ?  dictionary[word].chr : word\n  })\n\n  return compiledWords.reduce((acc, val) => {\n    if (isASCII(val)) {\n      return acc + ' ' + val + ' '\n    }\n    else {\n      return acc + val\n    }\n  })\n}\n\nfunction isASCII(str) {\n    return /^[\\x00-\\x7F]*$/.test(str);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}